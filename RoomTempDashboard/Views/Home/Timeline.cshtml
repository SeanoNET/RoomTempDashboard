@{
    ViewData["Title"] = "Timeline";
}

<canvas id="myChart" width="1200" height="500"></canvas>
<script src="~/lib/moment.js/moment.js"></script>
<script src="~/lib/signalr/dist/browser/signalr.js"></script>
<script src="~/lib/Chartjs/Chart.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@0.7.0"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-streaming@latest/dist/chartjs-plugin-streaming.min.js"></script>
<button id="reset">Reset Zoom</button>
<div id="json">

</div>
<script>


    // Connect to the SignalR hub
    var connection = new signalR.HubConnectionBuilder().withUrl("/dataHub").build();

    // Create chart
    var ctx = document.getElementById('myChart').getContext('2d');
    var chartConfig = {
        type: 'line',
        data: {
            datasets: [{
                borderColor: 'Blue',
                label: 'Temperature °C',
                fill: false,
                data: []
            }, {
                borderColor: 'Red',
                label: 'Humidity',
                fill: false,
                data: []
            }]
        }, options: {
            responsive: false,
            title: {
                display: true,
                text: 'Sensor Readings'
            },
            tooltips: {
                mode: 'index',
                intersect: false,
            },
            hover: {
                mode: 'nearest',
                intersect: true
            },
            scales: {
                xAxes: [{
                    type: 'realtime',
                    realtime: {
                        duration: 30000,
                        ttl: 120000,
                        delay: 2000
                    }
                }],
                yAxes: [{
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: ''
                    }
                }]
            },
            // Assume x axis is the realtime scale
            pan: {
                enabled: true,    // Enable panning
                mode: 'x',        // Allow panning in the x direction
                rangeMin: {
                    x: null       // Min value of the delay option
                },
                rangeMax: {
                    x: null       // Max value of the delay option
                }
            },
            zoom: {
                enabled: true,    // Enable zooming
                mode: 'x',        // Allow zooming in the x direction
                rangeMin: {
                    x: null       // Min value of the duration option
                },
                rangeMax: {
                    x: null       // Max value of the duration option
                }
            }
        }
    };

    var chart = new Chart(ctx, chartConfig);

    // SignalR events
    connection.on("GetLatestReading", function (json) {
        var data = JSON.parse(json);

        // Using 'real date  time' causes issues with the delay of the realtime graph.
        var MeasuredAt_EPOCH = convertUTCDateToLocalDate(new Date(data.MeasuredAt));
        MeasuredAt_EPOCH = MeasuredAt_EPOCH.getTime();

        // Load temp data
        chart.data.datasets[0].data.push({
            //x: MeasuredAt_EPOCH,
            x: Date.now(),
            y: data.Temperature
        });

        // Load humidity data
        chart.data.datasets[1].data.push({
            //x: MeasuredAt_EPOCH,
            x: Date.now(),
            y: data.Humidity
        });

        chart.update({
            preservation: true
        });

    });


    // Date Util
    function convertUTCDateToLocalDate(date) {
        var newDate = new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000);

        var offset = date.getTimezoneOffset() / 60;
        var hours = date.getHours();

        newDate.setHours(hours - offset);

        return newDate;
    }

    // Connect to hub on load
    $(document).ready(function () {
        // Start SignalR connection
        connection.start().then(function () {
            // Fix for selected delay
            getData(0);
            // Default refresh rate
            chart.options.scales.xAxes[0].realtime.delay = 5000;
            createOrChangePing(5000);
        }).catch((err) => { return console.error(err); });

    });

    $('#refreshRate').on('change', function (event) {
        var rate = $(this).children("option:selected").val();

        // Change chart delay
        chart.options.scales.xAxes[0].realtime.delay = parseInt(rate);
        chart.update();

        if (connection.state === 1) {
            // Fix for selected delay
            getData(0);
            createOrChangePing(rate);
        } else {
            // Show disconnected status
        }
    });

    var ping = null;
    var totalRunningPings = 0;

    // Restarts or starts get data refresh
    function createOrChangePing(rate) {
        if (totalRunningPings != 0)
            stopPing();

        totalRunningPings++;
        ping = setInterval(getData, rate, rate);
    }

    function stopPing() {
        clearInterval(ping);
        totalRunningPings--;
        console.log("Stopped ping");
    }

    function getData(currentRate) {
        console.log(`Call GetLatestReading every ${currentRate}ms - total running: ${totalRunningPings}`);
        connection.invoke("GetLatestReading").catch((err) => { console.error(err); });
    }

    // Reset Zoom
    document.getElementById('reset').addEventListener('click', () => {
        chart.resetZoom();
    });

</script>